/*
OpenAlex API

An OpenAPI specification for the OpenAlex API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListConcepts200ResponseResultsInnerAncestorsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListConcepts200ResponseResultsInnerAncestorsInner{}

// ListConcepts200ResponseResultsInnerAncestorsInner A simplified representation of a concept, used when a concept is referenced by another entity.
type ListConcepts200ResponseResultsInnerAncestorsInner struct {
	// The OpenAlex ID for this concept.
	Id string `json:"id"`
	// The Wikidata ID for this concept.
	Wikidata string `json:"wikidata"`
	// The human-readable name of the concept.
	DisplayName string `json:"display_name"`
	// The hierarchical level of the concept. Level 0 is the most general, and level 5 is the most specific.
	Level int32 `json:"level"`
}

type _ListConcepts200ResponseResultsInnerAncestorsInner ListConcepts200ResponseResultsInnerAncestorsInner

// NewListConcepts200ResponseResultsInnerAncestorsInner instantiates a new ListConcepts200ResponseResultsInnerAncestorsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListConcepts200ResponseResultsInnerAncestorsInner(id string, wikidata string, displayName string, level int32) *ListConcepts200ResponseResultsInnerAncestorsInner {
	this := ListConcepts200ResponseResultsInnerAncestorsInner{}
	this.Id = id
	this.Wikidata = wikidata
	this.DisplayName = displayName
	this.Level = level
	return &this
}

// NewListConcepts200ResponseResultsInnerAncestorsInnerWithDefaults instantiates a new ListConcepts200ResponseResultsInnerAncestorsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListConcepts200ResponseResultsInnerAncestorsInnerWithDefaults() *ListConcepts200ResponseResultsInnerAncestorsInner {
	this := ListConcepts200ResponseResultsInnerAncestorsInner{}
	return &this
}

// GetId returns the Id field value
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) SetId(v string) {
	o.Id = v
}

// GetWikidata returns the Wikidata field value
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) GetWikidata() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Wikidata
}

// GetWikidataOk returns a tuple with the Wikidata field value
// and a boolean to check if the value has been set.
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) GetWikidataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wikidata, true
}

// SetWikidata sets field value
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) SetWikidata(v string) {
	o.Wikidata = v
}

// GetDisplayName returns the DisplayName field value
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetLevel returns the Level field value
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) GetLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) GetLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *ListConcepts200ResponseResultsInnerAncestorsInner) SetLevel(v int32) {
	o.Level = v
}

func (o ListConcepts200ResponseResultsInnerAncestorsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListConcepts200ResponseResultsInnerAncestorsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["wikidata"] = o.Wikidata
	toSerialize["display_name"] = o.DisplayName
	toSerialize["level"] = o.Level
	return toSerialize, nil
}

func (o *ListConcepts200ResponseResultsInnerAncestorsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"wikidata",
		"display_name",
		"level",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListConcepts200ResponseResultsInnerAncestorsInner := _ListConcepts200ResponseResultsInnerAncestorsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListConcepts200ResponseResultsInnerAncestorsInner)

	if err != nil {
		return err
	}

	*o = ListConcepts200ResponseResultsInnerAncestorsInner(varListConcepts200ResponseResultsInnerAncestorsInner)

	return err
}

type NullableListConcepts200ResponseResultsInnerAncestorsInner struct {
	value *ListConcepts200ResponseResultsInnerAncestorsInner
	isSet bool
}

func (v NullableListConcepts200ResponseResultsInnerAncestorsInner) Get() *ListConcepts200ResponseResultsInnerAncestorsInner {
	return v.value
}

func (v *NullableListConcepts200ResponseResultsInnerAncestorsInner) Set(val *ListConcepts200ResponseResultsInnerAncestorsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListConcepts200ResponseResultsInnerAncestorsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListConcepts200ResponseResultsInnerAncestorsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListConcepts200ResponseResultsInnerAncestorsInner(val *ListConcepts200ResponseResultsInnerAncestorsInner) *NullableListConcepts200ResponseResultsInnerAncestorsInner {
	return &NullableListConcepts200ResponseResultsInnerAncestorsInner{value: val, isSet: true}
}

func (v NullableListConcepts200ResponseResultsInnerAncestorsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListConcepts200ResponseResultsInnerAncestorsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


