/*
OpenAlex API

An OpenAPI specification for the OpenAlex API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListKeywords200ResponseResultsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListKeywords200ResponseResultsInner{}

// ListKeywords200ResponseResultsInner struct for ListKeywords200ResponseResultsInner
type ListKeywords200ResponseResultsInner struct {
	// The OpenAlex ID for this keyword.
	Id string `json:"id"`
	// The name of the keyword.
	DisplayName string `json:"display_name"`
	// The similarity score of the keyword to the work's title and abstract text. Higher scores indicate greater relevance.
	Score float32 `json:"score"`
	// The number of works in OpenAlex that have this keyword.
	WorksCount *int32 `json:"works_count,omitempty"`
	// The total number of citations received by all works with this keyword.
	CitedByCount *int32 `json:"cited_by_count,omitempty"`
}

type _ListKeywords200ResponseResultsInner ListKeywords200ResponseResultsInner

// NewListKeywords200ResponseResultsInner instantiates a new ListKeywords200ResponseResultsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListKeywords200ResponseResultsInner(id string, displayName string, score float32) *ListKeywords200ResponseResultsInner {
	this := ListKeywords200ResponseResultsInner{}
	this.Id = id
	this.DisplayName = displayName
	this.Score = score
	return &this
}

// NewListKeywords200ResponseResultsInnerWithDefaults instantiates a new ListKeywords200ResponseResultsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListKeywords200ResponseResultsInnerWithDefaults() *ListKeywords200ResponseResultsInner {
	this := ListKeywords200ResponseResultsInner{}
	return &this
}

// GetId returns the Id field value
func (o *ListKeywords200ResponseResultsInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListKeywords200ResponseResultsInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListKeywords200ResponseResultsInner) SetId(v string) {
	o.Id = v
}

// GetDisplayName returns the DisplayName field value
func (o *ListKeywords200ResponseResultsInner) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ListKeywords200ResponseResultsInner) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ListKeywords200ResponseResultsInner) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetScore returns the Score field value
func (o *ListKeywords200ResponseResultsInner) GetScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *ListKeywords200ResponseResultsInner) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *ListKeywords200ResponseResultsInner) SetScore(v float32) {
	o.Score = v
}

// GetWorksCount returns the WorksCount field value if set, zero value otherwise.
func (o *ListKeywords200ResponseResultsInner) GetWorksCount() int32 {
	if o == nil || IsNil(o.WorksCount) {
		var ret int32
		return ret
	}
	return *o.WorksCount
}

// GetWorksCountOk returns a tuple with the WorksCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListKeywords200ResponseResultsInner) GetWorksCountOk() (*int32, bool) {
	if o == nil || IsNil(o.WorksCount) {
		return nil, false
	}
	return o.WorksCount, true
}

// HasWorksCount returns a boolean if a field has been set.
func (o *ListKeywords200ResponseResultsInner) HasWorksCount() bool {
	if o != nil && !IsNil(o.WorksCount) {
		return true
	}

	return false
}

// SetWorksCount gets a reference to the given int32 and assigns it to the WorksCount field.
func (o *ListKeywords200ResponseResultsInner) SetWorksCount(v int32) {
	o.WorksCount = &v
}

// GetCitedByCount returns the CitedByCount field value if set, zero value otherwise.
func (o *ListKeywords200ResponseResultsInner) GetCitedByCount() int32 {
	if o == nil || IsNil(o.CitedByCount) {
		var ret int32
		return ret
	}
	return *o.CitedByCount
}

// GetCitedByCountOk returns a tuple with the CitedByCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListKeywords200ResponseResultsInner) GetCitedByCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CitedByCount) {
		return nil, false
	}
	return o.CitedByCount, true
}

// HasCitedByCount returns a boolean if a field has been set.
func (o *ListKeywords200ResponseResultsInner) HasCitedByCount() bool {
	if o != nil && !IsNil(o.CitedByCount) {
		return true
	}

	return false
}

// SetCitedByCount gets a reference to the given int32 and assigns it to the CitedByCount field.
func (o *ListKeywords200ResponseResultsInner) SetCitedByCount(v int32) {
	o.CitedByCount = &v
}

func (o ListKeywords200ResponseResultsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListKeywords200ResponseResultsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["display_name"] = o.DisplayName
	toSerialize["score"] = o.Score
	if !IsNil(o.WorksCount) {
		toSerialize["works_count"] = o.WorksCount
	}
	if !IsNil(o.CitedByCount) {
		toSerialize["cited_by_count"] = o.CitedByCount
	}
	return toSerialize, nil
}

func (o *ListKeywords200ResponseResultsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"display_name",
		"score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListKeywords200ResponseResultsInner := _ListKeywords200ResponseResultsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListKeywords200ResponseResultsInner)

	if err != nil {
		return err
	}

	*o = ListKeywords200ResponseResultsInner(varListKeywords200ResponseResultsInner)

	return err
}

type NullableListKeywords200ResponseResultsInner struct {
	value *ListKeywords200ResponseResultsInner
	isSet bool
}

func (v NullableListKeywords200ResponseResultsInner) Get() *ListKeywords200ResponseResultsInner {
	return v.value
}

func (v *NullableListKeywords200ResponseResultsInner) Set(val *ListKeywords200ResponseResultsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListKeywords200ResponseResultsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListKeywords200ResponseResultsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListKeywords200ResponseResultsInner(val *ListKeywords200ResponseResultsInner) *NullableListKeywords200ResponseResultsInner {
	return &NullableListKeywords200ResponseResultsInner{value: val, isSet: true}
}

func (v NullableListKeywords200ResponseResultsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListKeywords200ResponseResultsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


