/*
OpenAlex API

An OpenAPI specification for the OpenAlex API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListWorks200ResponseResultsInnerOpenAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListWorks200ResponseResultsInnerOpenAccess{}

// ListWorks200ResponseResultsInnerOpenAccess Information about the open access status of the work.
type ListWorks200ResponseResultsInnerOpenAccess struct {
	// True if this work is Open Access (OA).
	IsOa bool `json:"is_oa"`
	// The Open Access (OA) status of this work.
	OaStatus string `json:"oa_status"`
	// The best Open Access (OA) URL for this work.
	OaUrl *string `json:"oa_url,omitempty"`
	// True if any of this work's locations has is_oa=true and source.type=repository. This indicates that a full-text version of the work is available in an open access repository.
	AnyRepositoryHasFulltext *bool `json:"any_repository_has_fulltext,omitempty"`
}

type _ListWorks200ResponseResultsInnerOpenAccess ListWorks200ResponseResultsInnerOpenAccess

// NewListWorks200ResponseResultsInnerOpenAccess instantiates a new ListWorks200ResponseResultsInnerOpenAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListWorks200ResponseResultsInnerOpenAccess(isOa bool, oaStatus string) *ListWorks200ResponseResultsInnerOpenAccess {
	this := ListWorks200ResponseResultsInnerOpenAccess{}
	this.IsOa = isOa
	this.OaStatus = oaStatus
	return &this
}

// NewListWorks200ResponseResultsInnerOpenAccessWithDefaults instantiates a new ListWorks200ResponseResultsInnerOpenAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListWorks200ResponseResultsInnerOpenAccessWithDefaults() *ListWorks200ResponseResultsInnerOpenAccess {
	this := ListWorks200ResponseResultsInnerOpenAccess{}
	return &this
}

// GetIsOa returns the IsOa field value
func (o *ListWorks200ResponseResultsInnerOpenAccess) GetIsOa() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOa
}

// GetIsOaOk returns a tuple with the IsOa field value
// and a boolean to check if the value has been set.
func (o *ListWorks200ResponseResultsInnerOpenAccess) GetIsOaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOa, true
}

// SetIsOa sets field value
func (o *ListWorks200ResponseResultsInnerOpenAccess) SetIsOa(v bool) {
	o.IsOa = v
}

// GetOaStatus returns the OaStatus field value
func (o *ListWorks200ResponseResultsInnerOpenAccess) GetOaStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OaStatus
}

// GetOaStatusOk returns a tuple with the OaStatus field value
// and a boolean to check if the value has been set.
func (o *ListWorks200ResponseResultsInnerOpenAccess) GetOaStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OaStatus, true
}

// SetOaStatus sets field value
func (o *ListWorks200ResponseResultsInnerOpenAccess) SetOaStatus(v string) {
	o.OaStatus = v
}

// GetOaUrl returns the OaUrl field value if set, zero value otherwise.
func (o *ListWorks200ResponseResultsInnerOpenAccess) GetOaUrl() string {
	if o == nil || IsNil(o.OaUrl) {
		var ret string
		return ret
	}
	return *o.OaUrl
}

// GetOaUrlOk returns a tuple with the OaUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListWorks200ResponseResultsInnerOpenAccess) GetOaUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OaUrl) {
		return nil, false
	}
	return o.OaUrl, true
}

// HasOaUrl returns a boolean if a field has been set.
func (o *ListWorks200ResponseResultsInnerOpenAccess) HasOaUrl() bool {
	if o != nil && !IsNil(o.OaUrl) {
		return true
	}

	return false
}

// SetOaUrl gets a reference to the given string and assigns it to the OaUrl field.
func (o *ListWorks200ResponseResultsInnerOpenAccess) SetOaUrl(v string) {
	o.OaUrl = &v
}

// GetAnyRepositoryHasFulltext returns the AnyRepositoryHasFulltext field value if set, zero value otherwise.
func (o *ListWorks200ResponseResultsInnerOpenAccess) GetAnyRepositoryHasFulltext() bool {
	if o == nil || IsNil(o.AnyRepositoryHasFulltext) {
		var ret bool
		return ret
	}
	return *o.AnyRepositoryHasFulltext
}

// GetAnyRepositoryHasFulltextOk returns a tuple with the AnyRepositoryHasFulltext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListWorks200ResponseResultsInnerOpenAccess) GetAnyRepositoryHasFulltextOk() (*bool, bool) {
	if o == nil || IsNil(o.AnyRepositoryHasFulltext) {
		return nil, false
	}
	return o.AnyRepositoryHasFulltext, true
}

// HasAnyRepositoryHasFulltext returns a boolean if a field has been set.
func (o *ListWorks200ResponseResultsInnerOpenAccess) HasAnyRepositoryHasFulltext() bool {
	if o != nil && !IsNil(o.AnyRepositoryHasFulltext) {
		return true
	}

	return false
}

// SetAnyRepositoryHasFulltext gets a reference to the given bool and assigns it to the AnyRepositoryHasFulltext field.
func (o *ListWorks200ResponseResultsInnerOpenAccess) SetAnyRepositoryHasFulltext(v bool) {
	o.AnyRepositoryHasFulltext = &v
}

func (o ListWorks200ResponseResultsInnerOpenAccess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListWorks200ResponseResultsInnerOpenAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_oa"] = o.IsOa
	toSerialize["oa_status"] = o.OaStatus
	if !IsNil(o.OaUrl) {
		toSerialize["oa_url"] = o.OaUrl
	}
	if !IsNil(o.AnyRepositoryHasFulltext) {
		toSerialize["any_repository_has_fulltext"] = o.AnyRepositoryHasFulltext
	}
	return toSerialize, nil
}

func (o *ListWorks200ResponseResultsInnerOpenAccess) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_oa",
		"oa_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListWorks200ResponseResultsInnerOpenAccess := _ListWorks200ResponseResultsInnerOpenAccess{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListWorks200ResponseResultsInnerOpenAccess)

	if err != nil {
		return err
	}

	*o = ListWorks200ResponseResultsInnerOpenAccess(varListWorks200ResponseResultsInnerOpenAccess)

	return err
}

type NullableListWorks200ResponseResultsInnerOpenAccess struct {
	value *ListWorks200ResponseResultsInnerOpenAccess
	isSet bool
}

func (v NullableListWorks200ResponseResultsInnerOpenAccess) Get() *ListWorks200ResponseResultsInnerOpenAccess {
	return v.value
}

func (v *NullableListWorks200ResponseResultsInnerOpenAccess) Set(val *ListWorks200ResponseResultsInnerOpenAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableListWorks200ResponseResultsInnerOpenAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableListWorks200ResponseResultsInnerOpenAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListWorks200ResponseResultsInnerOpenAccess(val *ListWorks200ResponseResultsInnerOpenAccess) *NullableListWorks200ResponseResultsInnerOpenAccess {
	return &NullableListWorks200ResponseResultsInnerOpenAccess{value: val, isSet: true}
}

func (v NullableListWorks200ResponseResultsInnerOpenAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListWorks200ResponseResultsInnerOpenAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


