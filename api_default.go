/*
OpenAlex API

An OpenAPI specification for the OpenAlex API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiAutocompleteEntitiesRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	entityType string
	q *string
}

// The query string for autocomplete suggestions.
func (r ApiAutocompleteEntitiesRequest) Q(q string) ApiAutocompleteEntitiesRequest {
	r.q = &q
	return r
}

func (r ApiAutocompleteEntitiesRequest) Execute() (*Autocomplete, *http.Response, error) {
	return r.ApiService.AutocompleteEntitiesExecute(r)
}

/*
AutocompleteEntities Autocomplete entities

Returns a list of entities that match the given query string for autocomplete suggestions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityType
 @return ApiAutocompleteEntitiesRequest
*/
func (a *DefaultAPIService) AutocompleteEntities(ctx context.Context, entityType string) ApiAutocompleteEntitiesRequest {
	return ApiAutocompleteEntitiesRequest{
		ApiService: a,
		ctx: ctx,
		entityType: entityType,
	}
}

// Execute executes the request
//  @return Autocomplete
func (a *DefaultAPIService) AutocompleteEntitiesExecute(r ApiAutocompleteEntitiesRequest) (*Autocomplete, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Autocomplete
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AutocompleteEntities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/autocomplete/{entity_type}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_type"+"}", url.PathEscape(parameterValueToString(r.entityType, "entityType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v AutocompleteEntities400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAuthorsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	filter *string
	search *string
	sort *string
	cursor *string
	perPage *int32
	select_ *string
	groupBy *string
	sample *int32
}

// Filters narrow the list down to just entities that meet particular conditions. Multiple filters can be combined using commas. Filters support logical expressions including inequality, negation, intersection, and addition. 
func (r ApiListAuthorsRequest) Filter(filter string) ApiListAuthorsRequest {
	r.filter = &filter
	return r
}

// Text search query string to find entities that match the given text.
func (r ApiListAuthorsRequest) Search(search string) ApiListAuthorsRequest {
	r.search = &search
	return r
}

// Specify the property to sort the results by. Multiple sort keys can be provided, separated by commas. Append &#39;:desc&#39; to sort in descending order. Default sort direction is ascending. 
func (r ApiListAuthorsRequest) Sort(sort string) ApiListAuthorsRequest {
	r.sort = &sort
	return r
}

// A cursor value for paginating through results. Use &#39;*&#39; to start cursor pagination, or use the &#39;next_cursor&#39; value from the previous response to get the next page.  Warning: Don&#39;t use cursor paging to download the whole dataset. It&#39;s inefficient and puts a massive load on the servers. Instead, use the OpenAlex snapshot for downloading all data at once. 
func (r ApiListAuthorsRequest) Cursor(cursor string) ApiListAuthorsRequest {
	r.cursor = &cursor
	return r
}

// The number of results to return per page. Minimum is 1, maximum is 200, default is 25.
func (r ApiListAuthorsRequest) PerPage(perPage int32) ApiListAuthorsRequest {
	r.perPage = &perPage
	return r
}

// Comma-separated list of fields to return in the results. Only root-level fields can be selected.
func (r ApiListAuthorsRequest) Select_(select_ string) ApiListAuthorsRequest {
	r.select_ = &select_
	return r
}

// Groups the results by a specified property. The response will include a &#x60;group_by&#x60; object with counts for each group.  You can group by most of the same properties that you can filter by.  To include the \&quot;unknown\&quot; group in the response, add &#x60;:include_unknown&#x60; after the group-by parameter.  Example: &#x60;group_by&#x3D;authorships.institutions.id&#x60; or &#x60;group_by&#x3D;authorships.institutions.id:include_unknown&#x60;  The response will contain: - &#x60;key&#x60;: The OpenAlex ID or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;key_display_name&#x60;: The &#x60;display_name&#x60; or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;count&#x60;: The number of entities in the group. 
func (r ApiListAuthorsRequest) GroupBy(groupBy string) ApiListAuthorsRequest {
	r.groupBy = &groupBy
	return r
}

// Get a random sample of results
func (r ApiListAuthorsRequest) Sample(sample int32) ApiListAuthorsRequest {
	r.sample = &sample
	return r
}

func (r ApiListAuthorsRequest) Execute() (*ListAuthors200Response, *http.Response, error) {
	return r.ApiService.ListAuthorsExecute(r)
}

/*
ListAuthors List Authors

Returns a list of authors.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAuthorsRequest
*/
func (a *DefaultAPIService) ListAuthors(ctx context.Context) ApiListAuthorsRequest {
	return ApiListAuthorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListAuthors200Response
func (a *DefaultAPIService) ListAuthorsExecute(r ApiListAuthorsRequest) (*ListAuthors200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListAuthors200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ListAuthors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per-page", r.perPage, "")
	} else {
		var defaultValue int32 = 25
		r.perPage = &defaultValue
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.sample != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sample", r.sample, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListConceptsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	filter *string
	search *string
	sort *string
	page *int32
	perPage *int32
	select_ *string
	groupBy *string
	sample *int32
}

// Filters narrow the list down to just entities that meet particular conditions. Multiple filters can be combined using commas. Filters support logical expressions including inequality, negation, intersection, and addition. 
func (r ApiListConceptsRequest) Filter(filter string) ApiListConceptsRequest {
	r.filter = &filter
	return r
}

// Text search query string to find entities that match the given text.
func (r ApiListConceptsRequest) Search(search string) ApiListConceptsRequest {
	r.search = &search
	return r
}

// Specify the property to sort the results by. Multiple sort keys can be provided, separated by commas. Append &#39;:desc&#39; to sort in descending order. Default sort direction is ascending. 
func (r ApiListConceptsRequest) Sort(sort string) ApiListConceptsRequest {
	r.sort = &sort
	return r
}

// The page number of results to return. Used for basic paging.
func (r ApiListConceptsRequest) Page(page int32) ApiListConceptsRequest {
	r.page = &page
	return r
}

// The number of results to return per page. Minimum is 1, maximum is 200, default is 25.
func (r ApiListConceptsRequest) PerPage(perPage int32) ApiListConceptsRequest {
	r.perPage = &perPage
	return r
}

// Comma-separated list of fields to return in the results. Only root-level fields can be selected.
func (r ApiListConceptsRequest) Select_(select_ string) ApiListConceptsRequest {
	r.select_ = &select_
	return r
}

// Groups the results by a specified property. The response will include a &#x60;group_by&#x60; object with counts for each group.  You can group by most of the same properties that you can filter by.  To include the \&quot;unknown\&quot; group in the response, add &#x60;:include_unknown&#x60; after the group-by parameter.  Example: &#x60;group_by&#x3D;authorships.institutions.id&#x60; or &#x60;group_by&#x3D;authorships.institutions.id:include_unknown&#x60;  The response will contain: - &#x60;key&#x60;: The OpenAlex ID or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;key_display_name&#x60;: The &#x60;display_name&#x60; or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;count&#x60;: The number of entities in the group. 
func (r ApiListConceptsRequest) GroupBy(groupBy string) ApiListConceptsRequest {
	r.groupBy = &groupBy
	return r
}

// Get a random sample of results
func (r ApiListConceptsRequest) Sample(sample int32) ApiListConceptsRequest {
	r.sample = &sample
	return r
}

func (r ApiListConceptsRequest) Execute() (*ListConcepts200Response, *http.Response, error) {
	return r.ApiService.ListConceptsExecute(r)
}

/*
ListConcepts List Concepts

Returns a list of concepts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListConceptsRequest
*/
func (a *DefaultAPIService) ListConcepts(ctx context.Context) ApiListConceptsRequest {
	return ApiListConceptsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListConcepts200Response
func (a *DefaultAPIService) ListConceptsExecute(r ApiListConceptsRequest) (*ListConcepts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListConcepts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ListConcepts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/concepts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per-page", r.perPage, "")
	} else {
		var defaultValue int32 = 25
		r.perPage = &defaultValue
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.sample != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sample", r.sample, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListFundersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	filter *string
	search *string
	sort *string
	page *int32
	perPage *int32
	select_ *string
	groupBy *string
	sample *int32
}

// Filters narrow the list down to just entities that meet particular conditions. Multiple filters can be combined using commas. Filters support logical expressions including inequality, negation, intersection, and addition. 
func (r ApiListFundersRequest) Filter(filter string) ApiListFundersRequest {
	r.filter = &filter
	return r
}

// Text search query string to find entities that match the given text.
func (r ApiListFundersRequest) Search(search string) ApiListFundersRequest {
	r.search = &search
	return r
}

// Specify the property to sort the results by. Multiple sort keys can be provided, separated by commas. Append &#39;:desc&#39; to sort in descending order. Default sort direction is ascending. 
func (r ApiListFundersRequest) Sort(sort string) ApiListFundersRequest {
	r.sort = &sort
	return r
}

// The page number of results to return. Used for basic paging.
func (r ApiListFundersRequest) Page(page int32) ApiListFundersRequest {
	r.page = &page
	return r
}

// The number of results to return per page. Minimum is 1, maximum is 200, default is 25.
func (r ApiListFundersRequest) PerPage(perPage int32) ApiListFundersRequest {
	r.perPage = &perPage
	return r
}

// Comma-separated list of fields to return in the results. Only root-level fields can be selected.
func (r ApiListFundersRequest) Select_(select_ string) ApiListFundersRequest {
	r.select_ = &select_
	return r
}

// Groups the results by a specified property. The response will include a &#x60;group_by&#x60; object with counts for each group.  You can group by most of the same properties that you can filter by.  To include the \&quot;unknown\&quot; group in the response, add &#x60;:include_unknown&#x60; after the group-by parameter.  Example: &#x60;group_by&#x3D;authorships.institutions.id&#x60; or &#x60;group_by&#x3D;authorships.institutions.id:include_unknown&#x60;  The response will contain: - &#x60;key&#x60;: The OpenAlex ID or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;key_display_name&#x60;: The &#x60;display_name&#x60; or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;count&#x60;: The number of entities in the group. 
func (r ApiListFundersRequest) GroupBy(groupBy string) ApiListFundersRequest {
	r.groupBy = &groupBy
	return r
}

// Get a random sample of results
func (r ApiListFundersRequest) Sample(sample int32) ApiListFundersRequest {
	r.sample = &sample
	return r
}

func (r ApiListFundersRequest) Execute() (*ListFunders200Response, *http.Response, error) {
	return r.ApiService.ListFundersExecute(r)
}

/*
ListFunders List Funders

Returns a list of funders.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListFundersRequest
*/
func (a *DefaultAPIService) ListFunders(ctx context.Context) ApiListFundersRequest {
	return ApiListFundersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListFunders200Response
func (a *DefaultAPIService) ListFundersExecute(r ApiListFundersRequest) (*ListFunders200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListFunders200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ListFunders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/funders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per-page", r.perPage, "")
	} else {
		var defaultValue int32 = 25
		r.perPage = &defaultValue
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.sample != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sample", r.sample, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInstitutionsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	filter *string
	search *string
	sort *string
	page *int32
	perPage *int32
	select_ *string
	groupBy *string
	sample *int32
}

// Filters narrow the list down to just entities that meet particular conditions. Multiple filters can be combined using commas. Filters support logical expressions including inequality, negation, intersection, and addition. 
func (r ApiListInstitutionsRequest) Filter(filter string) ApiListInstitutionsRequest {
	r.filter = &filter
	return r
}

// Text search query string to find entities that match the given text.
func (r ApiListInstitutionsRequest) Search(search string) ApiListInstitutionsRequest {
	r.search = &search
	return r
}

// Specify the property to sort the results by. Multiple sort keys can be provided, separated by commas. Append &#39;:desc&#39; to sort in descending order. Default sort direction is ascending. 
func (r ApiListInstitutionsRequest) Sort(sort string) ApiListInstitutionsRequest {
	r.sort = &sort
	return r
}

// The page number of results to return. Used for basic paging.
func (r ApiListInstitutionsRequest) Page(page int32) ApiListInstitutionsRequest {
	r.page = &page
	return r
}

// The number of results to return per page. Minimum is 1, maximum is 200, default is 25.
func (r ApiListInstitutionsRequest) PerPage(perPage int32) ApiListInstitutionsRequest {
	r.perPage = &perPage
	return r
}

// Comma-separated list of fields to return in the results. Only root-level fields can be selected.
func (r ApiListInstitutionsRequest) Select_(select_ string) ApiListInstitutionsRequest {
	r.select_ = &select_
	return r
}

// Groups the results by a specified property. The response will include a &#x60;group_by&#x60; object with counts for each group.  You can group by most of the same properties that you can filter by.  To include the \&quot;unknown\&quot; group in the response, add &#x60;:include_unknown&#x60; after the group-by parameter.  Example: &#x60;group_by&#x3D;authorships.institutions.id&#x60; or &#x60;group_by&#x3D;authorships.institutions.id:include_unknown&#x60;  The response will contain: - &#x60;key&#x60;: The OpenAlex ID or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;key_display_name&#x60;: The &#x60;display_name&#x60; or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;count&#x60;: The number of entities in the group. 
func (r ApiListInstitutionsRequest) GroupBy(groupBy string) ApiListInstitutionsRequest {
	r.groupBy = &groupBy
	return r
}

// Get a random sample of results
func (r ApiListInstitutionsRequest) Sample(sample int32) ApiListInstitutionsRequest {
	r.sample = &sample
	return r
}

func (r ApiListInstitutionsRequest) Execute() (*ListInstitutions200Response, *http.Response, error) {
	return r.ApiService.ListInstitutionsExecute(r)
}

/*
ListInstitutions List Institutions

Returns a list of institutions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListInstitutionsRequest
*/
func (a *DefaultAPIService) ListInstitutions(ctx context.Context) ApiListInstitutionsRequest {
	return ApiListInstitutionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListInstitutions200Response
func (a *DefaultAPIService) ListInstitutionsExecute(r ApiListInstitutionsRequest) (*ListInstitutions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListInstitutions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ListInstitutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/institutions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per-page", r.perPage, "")
	} else {
		var defaultValue int32 = 25
		r.perPage = &defaultValue
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.sample != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sample", r.sample, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListKeywordsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	filter *string
	search *string
	sort *string
	page *int32
	perPage *int32
	select_ *string
	groupBy *string
	sample *int32
}

// Filters narrow the list down to just entities that meet particular conditions. Multiple filters can be combined using commas. Filters support logical expressions including inequality, negation, intersection, and addition. 
func (r ApiListKeywordsRequest) Filter(filter string) ApiListKeywordsRequest {
	r.filter = &filter
	return r
}

// Text search query string to find entities that match the given text.
func (r ApiListKeywordsRequest) Search(search string) ApiListKeywordsRequest {
	r.search = &search
	return r
}

// Specify the property to sort the results by. Multiple sort keys can be provided, separated by commas. Append &#39;:desc&#39; to sort in descending order. Default sort direction is ascending. 
func (r ApiListKeywordsRequest) Sort(sort string) ApiListKeywordsRequest {
	r.sort = &sort
	return r
}

// The page number of results to return. Used for basic paging.
func (r ApiListKeywordsRequest) Page(page int32) ApiListKeywordsRequest {
	r.page = &page
	return r
}

// The number of results to return per page. Minimum is 1, maximum is 200, default is 25.
func (r ApiListKeywordsRequest) PerPage(perPage int32) ApiListKeywordsRequest {
	r.perPage = &perPage
	return r
}

// Comma-separated list of fields to return in the results. Only root-level fields can be selected.
func (r ApiListKeywordsRequest) Select_(select_ string) ApiListKeywordsRequest {
	r.select_ = &select_
	return r
}

// Groups the results by a specified property. The response will include a &#x60;group_by&#x60; object with counts for each group.  You can group by most of the same properties that you can filter by.  To include the \&quot;unknown\&quot; group in the response, add &#x60;:include_unknown&#x60; after the group-by parameter.  Example: &#x60;group_by&#x3D;authorships.institutions.id&#x60; or &#x60;group_by&#x3D;authorships.institutions.id:include_unknown&#x60;  The response will contain: - &#x60;key&#x60;: The OpenAlex ID or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;key_display_name&#x60;: The &#x60;display_name&#x60; or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;count&#x60;: The number of entities in the group. 
func (r ApiListKeywordsRequest) GroupBy(groupBy string) ApiListKeywordsRequest {
	r.groupBy = &groupBy
	return r
}

// Get a random sample of results
func (r ApiListKeywordsRequest) Sample(sample int32) ApiListKeywordsRequest {
	r.sample = &sample
	return r
}

func (r ApiListKeywordsRequest) Execute() (*ListKeywords200Response, *http.Response, error) {
	return r.ApiService.ListKeywordsExecute(r)
}

/*
ListKeywords List Keywords

Returns a list of keywords.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListKeywordsRequest
*/
func (a *DefaultAPIService) ListKeywords(ctx context.Context) ApiListKeywordsRequest {
	return ApiListKeywordsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListKeywords200Response
func (a *DefaultAPIService) ListKeywordsExecute(r ApiListKeywordsRequest) (*ListKeywords200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListKeywords200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ListKeywords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keywords"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per-page", r.perPage, "")
	} else {
		var defaultValue int32 = 25
		r.perPage = &defaultValue
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.sample != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sample", r.sample, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPublishersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	filter *string
	search *string
	sort *string
	page *int32
	perPage *int32
	select_ *string
	groupBy *string
	sample *int32
}

// Filters narrow the list down to just entities that meet particular conditions. Multiple filters can be combined using commas. Filters support logical expressions including inequality, negation, intersection, and addition. 
func (r ApiListPublishersRequest) Filter(filter string) ApiListPublishersRequest {
	r.filter = &filter
	return r
}

// Text search query string to find entities that match the given text.
func (r ApiListPublishersRequest) Search(search string) ApiListPublishersRequest {
	r.search = &search
	return r
}

// Specify the property to sort the results by. Multiple sort keys can be provided, separated by commas. Append &#39;:desc&#39; to sort in descending order. Default sort direction is ascending. 
func (r ApiListPublishersRequest) Sort(sort string) ApiListPublishersRequest {
	r.sort = &sort
	return r
}

// The page number of results to return. Used for basic paging.
func (r ApiListPublishersRequest) Page(page int32) ApiListPublishersRequest {
	r.page = &page
	return r
}

// The number of results to return per page. Minimum is 1, maximum is 200, default is 25.
func (r ApiListPublishersRequest) PerPage(perPage int32) ApiListPublishersRequest {
	r.perPage = &perPage
	return r
}

// Comma-separated list of fields to return in the results. Only root-level fields can be selected.
func (r ApiListPublishersRequest) Select_(select_ string) ApiListPublishersRequest {
	r.select_ = &select_
	return r
}

// Groups the results by a specified property. The response will include a &#x60;group_by&#x60; object with counts for each group.  You can group by most of the same properties that you can filter by.  To include the \&quot;unknown\&quot; group in the response, add &#x60;:include_unknown&#x60; after the group-by parameter.  Example: &#x60;group_by&#x3D;authorships.institutions.id&#x60; or &#x60;group_by&#x3D;authorships.institutions.id:include_unknown&#x60;  The response will contain: - &#x60;key&#x60;: The OpenAlex ID or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;key_display_name&#x60;: The &#x60;display_name&#x60; or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;count&#x60;: The number of entities in the group. 
func (r ApiListPublishersRequest) GroupBy(groupBy string) ApiListPublishersRequest {
	r.groupBy = &groupBy
	return r
}

// Get a random sample of results
func (r ApiListPublishersRequest) Sample(sample int32) ApiListPublishersRequest {
	r.sample = &sample
	return r
}

func (r ApiListPublishersRequest) Execute() (*ListPublishers200Response, *http.Response, error) {
	return r.ApiService.ListPublishersExecute(r)
}

/*
ListPublishers List Publishers

Returns a list of publishers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPublishersRequest
*/
func (a *DefaultAPIService) ListPublishers(ctx context.Context) ApiListPublishersRequest {
	return ApiListPublishersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListPublishers200Response
func (a *DefaultAPIService) ListPublishersExecute(r ApiListPublishersRequest) (*ListPublishers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPublishers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ListPublishers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/publishers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per-page", r.perPage, "")
	} else {
		var defaultValue int32 = 25
		r.perPage = &defaultValue
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.sample != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sample", r.sample, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSourcesRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	filter *string
	search *string
	sort *string
	page *int32
	perPage *int32
	select_ *string
	groupBy *string
	sample *int32
}

// Filters narrow the list down to just entities that meet particular conditions. Multiple filters can be combined using commas. Filters support logical expressions including inequality, negation, intersection, and addition. 
func (r ApiListSourcesRequest) Filter(filter string) ApiListSourcesRequest {
	r.filter = &filter
	return r
}

// Text search query string to find entities that match the given text.
func (r ApiListSourcesRequest) Search(search string) ApiListSourcesRequest {
	r.search = &search
	return r
}

// Specify the property to sort the results by. Multiple sort keys can be provided, separated by commas. Append &#39;:desc&#39; to sort in descending order. Default sort direction is ascending. 
func (r ApiListSourcesRequest) Sort(sort string) ApiListSourcesRequest {
	r.sort = &sort
	return r
}

// The page number of results to return. Used for basic paging.
func (r ApiListSourcesRequest) Page(page int32) ApiListSourcesRequest {
	r.page = &page
	return r
}

// The number of results to return per page. Minimum is 1, maximum is 200, default is 25.
func (r ApiListSourcesRequest) PerPage(perPage int32) ApiListSourcesRequest {
	r.perPage = &perPage
	return r
}

// Comma-separated list of fields to return in the results. Only root-level fields can be selected.
func (r ApiListSourcesRequest) Select_(select_ string) ApiListSourcesRequest {
	r.select_ = &select_
	return r
}

// Groups the results by a specified property. The response will include a &#x60;group_by&#x60; object with counts for each group.  You can group by most of the same properties that you can filter by.  To include the \&quot;unknown\&quot; group in the response, add &#x60;:include_unknown&#x60; after the group-by parameter.  Example: &#x60;group_by&#x3D;authorships.institutions.id&#x60; or &#x60;group_by&#x3D;authorships.institutions.id:include_unknown&#x60;  The response will contain: - &#x60;key&#x60;: The OpenAlex ID or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;key_display_name&#x60;: The &#x60;display_name&#x60; or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;count&#x60;: The number of entities in the group. 
func (r ApiListSourcesRequest) GroupBy(groupBy string) ApiListSourcesRequest {
	r.groupBy = &groupBy
	return r
}

// Get a random sample of results
func (r ApiListSourcesRequest) Sample(sample int32) ApiListSourcesRequest {
	r.sample = &sample
	return r
}

func (r ApiListSourcesRequest) Execute() (*ListSources200Response, *http.Response, error) {
	return r.ApiService.ListSourcesExecute(r)
}

/*
ListSources List Sources

Returns a list of sources. Sources are where works are hosted, including journals, conferences, preprint repositories, and institutional repositories.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSourcesRequest
*/
func (a *DefaultAPIService) ListSources(ctx context.Context) ApiListSourcesRequest {
	return ApiListSourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListSources200Response
func (a *DefaultAPIService) ListSourcesExecute(r ApiListSourcesRequest) (*ListSources200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListSources200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ListSources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per-page", r.perPage, "")
	} else {
		var defaultValue int32 = 25
		r.perPage = &defaultValue
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.sample != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sample", r.sample, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTopicsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	filter *string
	search *string
	sort *string
	page *int32
	perPage *int32
	select_ *string
	groupBy *string
	sample *int32
}

// Filters narrow the list down to just entities that meet particular conditions. Multiple filters can be combined using commas. Filters support logical expressions including inequality, negation, intersection, and addition. 
func (r ApiListTopicsRequest) Filter(filter string) ApiListTopicsRequest {
	r.filter = &filter
	return r
}

// Text search query string to find entities that match the given text.
func (r ApiListTopicsRequest) Search(search string) ApiListTopicsRequest {
	r.search = &search
	return r
}

// Specify the property to sort the results by. Multiple sort keys can be provided, separated by commas. Append &#39;:desc&#39; to sort in descending order. Default sort direction is ascending. 
func (r ApiListTopicsRequest) Sort(sort string) ApiListTopicsRequest {
	r.sort = &sort
	return r
}

// The page number of results to return. Used for basic paging.
func (r ApiListTopicsRequest) Page(page int32) ApiListTopicsRequest {
	r.page = &page
	return r
}

// The number of results to return per page. Minimum is 1, maximum is 200, default is 25.
func (r ApiListTopicsRequest) PerPage(perPage int32) ApiListTopicsRequest {
	r.perPage = &perPage
	return r
}

// Comma-separated list of fields to return in the results. Only root-level fields can be selected.
func (r ApiListTopicsRequest) Select_(select_ string) ApiListTopicsRequest {
	r.select_ = &select_
	return r
}

// Groups the results by a specified property. The response will include a &#x60;group_by&#x60; object with counts for each group.  You can group by most of the same properties that you can filter by.  To include the \&quot;unknown\&quot; group in the response, add &#x60;:include_unknown&#x60; after the group-by parameter.  Example: &#x60;group_by&#x3D;authorships.institutions.id&#x60; or &#x60;group_by&#x3D;authorships.institutions.id:include_unknown&#x60;  The response will contain: - &#x60;key&#x60;: The OpenAlex ID or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;key_display_name&#x60;: The &#x60;display_name&#x60; or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;count&#x60;: The number of entities in the group. 
func (r ApiListTopicsRequest) GroupBy(groupBy string) ApiListTopicsRequest {
	r.groupBy = &groupBy
	return r
}

// Get a random sample of results
func (r ApiListTopicsRequest) Sample(sample int32) ApiListTopicsRequest {
	r.sample = &sample
	return r
}

func (r ApiListTopicsRequest) Execute() (*ListTopics200Response, *http.Response, error) {
	return r.ApiService.ListTopicsExecute(r)
}

/*
ListTopics List Topics

Returns a list of topics.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListTopicsRequest
*/
func (a *DefaultAPIService) ListTopics(ctx context.Context) ApiListTopicsRequest {
	return ApiListTopicsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListTopics200Response
func (a *DefaultAPIService) ListTopicsExecute(r ApiListTopicsRequest) (*ListTopics200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListTopics200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ListTopics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per-page", r.perPage, "")
	} else {
		var defaultValue int32 = 25
		r.perPage = &defaultValue
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.sample != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sample", r.sample, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWorksRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	filter *string
	search *string
	sort *string
	page *int32
	perPage *int32
	select_ *string
	groupBy *string
	sample *int32
}

// Filters narrow the list down to just entities that meet particular conditions. Multiple filters can be combined using commas. Filters support logical expressions including inequality, negation, intersection, and addition. 
func (r ApiListWorksRequest) Filter(filter string) ApiListWorksRequest {
	r.filter = &filter
	return r
}

// Text search query string to find entities that match the given text.
func (r ApiListWorksRequest) Search(search string) ApiListWorksRequest {
	r.search = &search
	return r
}

// Specify the property to sort the results by. Multiple sort keys can be provided, separated by commas. Append &#39;:desc&#39; to sort in descending order. Default sort direction is ascending. 
func (r ApiListWorksRequest) Sort(sort string) ApiListWorksRequest {
	r.sort = &sort
	return r
}

// The page number of results to return. Used for basic paging.
func (r ApiListWorksRequest) Page(page int32) ApiListWorksRequest {
	r.page = &page
	return r
}

// The number of results to return per page. Minimum is 1, maximum is 200, default is 25.
func (r ApiListWorksRequest) PerPage(perPage int32) ApiListWorksRequest {
	r.perPage = &perPage
	return r
}

// Comma-separated list of fields to return in the results. Only root-level fields can be selected.
func (r ApiListWorksRequest) Select_(select_ string) ApiListWorksRequest {
	r.select_ = &select_
	return r
}

// Groups the results by a specified property. The response will include a &#x60;group_by&#x60; object with counts for each group.  You can group by most of the same properties that you can filter by.  To include the \&quot;unknown\&quot; group in the response, add &#x60;:include_unknown&#x60; after the group-by parameter.  Example: &#x60;group_by&#x3D;authorships.institutions.id&#x60; or &#x60;group_by&#x3D;authorships.institutions.id:include_unknown&#x60;  The response will contain: - &#x60;key&#x60;: The OpenAlex ID or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;key_display_name&#x60;: The &#x60;display_name&#x60; or raw value of the &#x60;group_by&#x60; parameter for members of this group. - &#x60;count&#x60;: The number of entities in the group. 
func (r ApiListWorksRequest) GroupBy(groupBy string) ApiListWorksRequest {
	r.groupBy = &groupBy
	return r
}

// Get a random sample of results
func (r ApiListWorksRequest) Sample(sample int32) ApiListWorksRequest {
	r.sample = &sample
	return r
}

func (r ApiListWorksRequest) Execute() (*ListWorks200Response, *http.Response, error) {
	return r.ApiService.ListWorksExecute(r)
}

/*
ListWorks List Works

Returns a list of works.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListWorksRequest
*/
func (a *DefaultAPIService) ListWorks(ctx context.Context) ApiListWorksRequest {
	return ApiListWorksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListWorks200Response
func (a *DefaultAPIService) ListWorksExecute(r ApiListWorksRequest) (*ListWorks200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListWorks200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ListWorks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/works"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per-page", r.perPage, "")
	} else {
		var defaultValue int32 = 25
		r.perPage = &defaultValue
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.sample != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sample", r.sample, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["PoliteEmail"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["email"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
