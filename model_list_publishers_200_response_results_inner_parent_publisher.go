/*
OpenAlex API

An OpenAPI specification for the OpenAlex API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListPublishers200ResponseResultsInnerParentPublisher type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPublishers200ResponseResultsInnerParentPublisher{}

// ListPublishers200ResponseResultsInnerParentPublisher struct for ListPublishers200ResponseResultsInnerParentPublisher
type ListPublishers200ResponseResultsInnerParentPublisher struct {
	// The OpenAlex ID for the parent publisher.
	Id string `json:"id"`
	// The display name of the parent publisher.
	DisplayName string `json:"display_name"`
}

type _ListPublishers200ResponseResultsInnerParentPublisher ListPublishers200ResponseResultsInnerParentPublisher

// NewListPublishers200ResponseResultsInnerParentPublisher instantiates a new ListPublishers200ResponseResultsInnerParentPublisher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPublishers200ResponseResultsInnerParentPublisher(id string, displayName string) *ListPublishers200ResponseResultsInnerParentPublisher {
	this := ListPublishers200ResponseResultsInnerParentPublisher{}
	this.Id = id
	this.DisplayName = displayName
	return &this
}

// NewListPublishers200ResponseResultsInnerParentPublisherWithDefaults instantiates a new ListPublishers200ResponseResultsInnerParentPublisher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPublishers200ResponseResultsInnerParentPublisherWithDefaults() *ListPublishers200ResponseResultsInnerParentPublisher {
	this := ListPublishers200ResponseResultsInnerParentPublisher{}
	return &this
}

// GetId returns the Id field value
func (o *ListPublishers200ResponseResultsInnerParentPublisher) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListPublishers200ResponseResultsInnerParentPublisher) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListPublishers200ResponseResultsInnerParentPublisher) SetId(v string) {
	o.Id = v
}

// GetDisplayName returns the DisplayName field value
func (o *ListPublishers200ResponseResultsInnerParentPublisher) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ListPublishers200ResponseResultsInnerParentPublisher) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ListPublishers200ResponseResultsInnerParentPublisher) SetDisplayName(v string) {
	o.DisplayName = v
}

func (o ListPublishers200ResponseResultsInnerParentPublisher) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPublishers200ResponseResultsInnerParentPublisher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["display_name"] = o.DisplayName
	return toSerialize, nil
}

func (o *ListPublishers200ResponseResultsInnerParentPublisher) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"display_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListPublishers200ResponseResultsInnerParentPublisher := _ListPublishers200ResponseResultsInnerParentPublisher{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListPublishers200ResponseResultsInnerParentPublisher)

	if err != nil {
		return err
	}

	*o = ListPublishers200ResponseResultsInnerParentPublisher(varListPublishers200ResponseResultsInnerParentPublisher)

	return err
}

type NullableListPublishers200ResponseResultsInnerParentPublisher struct {
	value *ListPublishers200ResponseResultsInnerParentPublisher
	isSet bool
}

func (v NullableListPublishers200ResponseResultsInnerParentPublisher) Get() *ListPublishers200ResponseResultsInnerParentPublisher {
	return v.value
}

func (v *NullableListPublishers200ResponseResultsInnerParentPublisher) Set(val *ListPublishers200ResponseResultsInnerParentPublisher) {
	v.value = val
	v.isSet = true
}

func (v NullableListPublishers200ResponseResultsInnerParentPublisher) IsSet() bool {
	return v.isSet
}

func (v *NullableListPublishers200ResponseResultsInnerParentPublisher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPublishers200ResponseResultsInnerParentPublisher(val *ListPublishers200ResponseResultsInnerParentPublisher) *NullableListPublishers200ResponseResultsInnerParentPublisher {
	return &NullableListPublishers200ResponseResultsInnerParentPublisher{value: val, isSet: true}
}

func (v NullableListPublishers200ResponseResultsInnerParentPublisher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPublishers200ResponseResultsInnerParentPublisher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


