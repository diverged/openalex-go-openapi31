/*
OpenAlex API

An OpenAPI specification for the OpenAlex API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListWorks200ResponseResultsInnerCountsByYearInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListWorks200ResponseResultsInnerCountsByYearInner{}

// ListWorks200ResponseResultsInnerCountsByYearInner struct for ListWorks200ResponseResultsInnerCountsByYearInner
type ListWorks200ResponseResultsInnerCountsByYearInner struct {
	CitedByCount *int32 `json:"cited_by_count,omitempty"`
	Year *int32 `json:"year,omitempty"`
}

// NewListWorks200ResponseResultsInnerCountsByYearInner instantiates a new ListWorks200ResponseResultsInnerCountsByYearInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListWorks200ResponseResultsInnerCountsByYearInner() *ListWorks200ResponseResultsInnerCountsByYearInner {
	this := ListWorks200ResponseResultsInnerCountsByYearInner{}
	return &this
}

// NewListWorks200ResponseResultsInnerCountsByYearInnerWithDefaults instantiates a new ListWorks200ResponseResultsInnerCountsByYearInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListWorks200ResponseResultsInnerCountsByYearInnerWithDefaults() *ListWorks200ResponseResultsInnerCountsByYearInner {
	this := ListWorks200ResponseResultsInnerCountsByYearInner{}
	return &this
}

// GetCitedByCount returns the CitedByCount field value if set, zero value otherwise.
func (o *ListWorks200ResponseResultsInnerCountsByYearInner) GetCitedByCount() int32 {
	if o == nil || IsNil(o.CitedByCount) {
		var ret int32
		return ret
	}
	return *o.CitedByCount
}

// GetCitedByCountOk returns a tuple with the CitedByCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListWorks200ResponseResultsInnerCountsByYearInner) GetCitedByCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CitedByCount) {
		return nil, false
	}
	return o.CitedByCount, true
}

// HasCitedByCount returns a boolean if a field has been set.
func (o *ListWorks200ResponseResultsInnerCountsByYearInner) HasCitedByCount() bool {
	if o != nil && !IsNil(o.CitedByCount) {
		return true
	}

	return false
}

// SetCitedByCount gets a reference to the given int32 and assigns it to the CitedByCount field.
func (o *ListWorks200ResponseResultsInnerCountsByYearInner) SetCitedByCount(v int32) {
	o.CitedByCount = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *ListWorks200ResponseResultsInnerCountsByYearInner) GetYear() int32 {
	if o == nil || IsNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListWorks200ResponseResultsInnerCountsByYearInner) GetYearOk() (*int32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *ListWorks200ResponseResultsInnerCountsByYearInner) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *ListWorks200ResponseResultsInnerCountsByYearInner) SetYear(v int32) {
	o.Year = &v
}

func (o ListWorks200ResponseResultsInnerCountsByYearInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListWorks200ResponseResultsInnerCountsByYearInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CitedByCount) {
		toSerialize["cited_by_count"] = o.CitedByCount
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	return toSerialize, nil
}

type NullableListWorks200ResponseResultsInnerCountsByYearInner struct {
	value *ListWorks200ResponseResultsInnerCountsByYearInner
	isSet bool
}

func (v NullableListWorks200ResponseResultsInnerCountsByYearInner) Get() *ListWorks200ResponseResultsInnerCountsByYearInner {
	return v.value
}

func (v *NullableListWorks200ResponseResultsInnerCountsByYearInner) Set(val *ListWorks200ResponseResultsInnerCountsByYearInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListWorks200ResponseResultsInnerCountsByYearInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListWorks200ResponseResultsInnerCountsByYearInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListWorks200ResponseResultsInnerCountsByYearInner(val *ListWorks200ResponseResultsInnerCountsByYearInner) *NullableListWorks200ResponseResultsInnerCountsByYearInner {
	return &NullableListWorks200ResponseResultsInnerCountsByYearInner{value: val, isSet: true}
}

func (v NullableListWorks200ResponseResultsInnerCountsByYearInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListWorks200ResponseResultsInnerCountsByYearInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


